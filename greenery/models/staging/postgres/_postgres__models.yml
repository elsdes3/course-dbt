version: 2

models:
  - name: stg_postgres_users
    description: '{{ doc("users_description") }}'
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - user_id
            - first_name
            - last_name
            - email
            - phone_number
            - created_at
            - updated_at
            - address_id
    columns:
      - name: user_id
        description: '{{ doc("users_user_id") }}'
        data_tests:
          - not_null
          - unique
      - name: first_name
        description: '{{ doc("users_first_name") }}'
        data_tests:
          - not_null
      - name: last_name
        description: '{{ doc("users_last_name") }}'
        data_tests:
          - not_null
      - name: email
        description: '{{ doc("users_email") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
          - dbt_expectations.expect_column_values_to_match_like_pattern:
              like_pattern: "%@%.%%"
        tags: [dbt_expectations]
      - name: phone_number
        description: '{{ doc("users_phone_number") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9]{3}-[0-9]{3}-[0-9]{4}$'
          - dbt_expectations.expect_column_value_lengths_to_equal:
              value: 12
        tags: [dbt_expectations]
      - name: created_at
        description: '{{ doc("users_created_at") }}'
        data_tests:
          - not_null
          - order_before_delivery:
              field: updated_at
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: TIMESTAMP_NTZ
        tags: [dbt_expectations]
      - name: updated_at
        description: '{{ doc("users_updated_at") }}'
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: TIMESTAMP_NTZ
        tags: [dbt_expectations]
      - name: address_id
        description: '{{ doc("users_address_id") }}'

  - name: stg_postgres_addresses
    description: address of each user on the platform
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - address_id
            - address
            - zipcode
            - state
            - country
    columns:
      - name: address_id
        description: '{{ doc("addresses_address_id") }}'
        data_tests:
          - not_null
          - unique
      - name: address
        description: '{{ doc("addresses_address") }}'
        data_tests:
          - not_null
      - name: zipcode
        description: '{{ doc("addresses_zipcode") }}'
        data_tests:
          - not_null
          - positive_values
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9]{4,5}'
        tags: [dbt_expectations]
      - name: state
        description: '{{ doc("addresses_state") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '[A-Z][a-z]+'
        tags: [dbt_expectations]
      - name: country
        description: '{{ doc("addresses_country") }}'
        data_tests:
          - not_null
          - accepted_values:
              values: ['United States']

  - name: stg_postgres_promos
    description: '{{ doc("promos_description") }}'
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - promo_id
            - discount
            - status
    columns:
      - name: promo_id
        description: '{{ doc("promos_promo_id") }}'
        data_tests:
          - not_null
          - unique
          - accepted_values:
              values:
                - 'instruction set'
                - Optional
                - Mandatory
                - Digitized
                - 'task-force'
                - leverage
      - name: discount
        description: '{{ doc("promos_discount") }}'
        data_tests:
          - positive_values
      - name: status
        description: '{{ doc("promos_status") }}'
        data_tests:
          - not_null
          - accepted_values:
              values: [inactive, active]

  - name: stg_postgres_products
    description: '{{ doc("products_description") }}'
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - product_id
            - name
            - price
            - inventory
    columns:
      - name: product_id
        description: '{{ doc("products_product_id") }}'
        data_tests:
          - not_null
          - unique
      - name: name
        description: '{{ doc("products_name") }}'
        data_tests:
          - not_null
      - name: price
        description: '{{ doc("products_price") }}'
        data_tests:
          - not_null
          - positive_values
      - name: inventory
        description: '{{ doc("products_inventory") }}'
        data_tests:
          - not_null
          - positive_values

  - name: stg_postgres_orders
    description: '{{ doc("orders_description") }}'
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - order_id
            - user_id
            - promo_id
            - address_id
            - created_at
            - order_cost
            - shipping_cost
            - order_total
            - tracking_id
            - shipping_service
            - estimated_delivery_at
            - delivered_at
            - status
    columns:
      - name: order_id
        description: '{{ doc("orders_order_id") }}'
        data_tests:
          - not_null
          - unique
      - name: user_id
        description: '{{ doc("orders_user_id") }}'
      - name: promo_id
        description: '{{ doc("orders_promo_id") }}'
        data_tests:
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref('stg_postgres_promos')
              compare_column_name: promo_id
              row_condition: "promo_id is not null"
        tags: [dbt_expectations]
      - name: address_id
        description: '{{ doc("orders_address_id") }}'
      - name: created_at
        description: '{{ doc("orders_created_at") }}'
        data_tests:
          - not_null
          - order_before_delivery:
              field: delivered_at
          - order_before_delivery:
              field: estimated_delivery_at
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: TIMESTAMP_NTZ
        tags: [dbt_expectations]
      - name: order_cost
        description: '{{ doc("orders_order_cost") }}'
        data_tests:
          - not_null
          - positive_values
      - name: shipping_cost
        description: '{{ doc("orders_shipping_cost") }}'
        data_tests:
          - not_null
          - positive_values
          - dbt_utils.expression_is_true:
              expression: "<order_cost"
        tags: [dbt_utils]
      - name: order_total
        description: '{{ doc("orders_order_total") }}'
        data_tests:
          - not_null
          - positive_values
          - dbt_utils.expression_is_true:
              expression: "=ROUND(order_cost+shipping_cost, 2)"
              where: "promo_id IS NULL"
          - dbt_utils.expression_is_true:
              expression: "<ROUND(order_cost+shipping_cost, 2)"
              where: "promo_id IS NOT NULL"
        tags: [dbt_utils]
      - name: tracking_id
        description: '{{ doc("orders_tracking_id") }}'
      - name: shipping_service
        description: '{{ doc("orders_shipping_service") }}'
        data_tests:
          - accepted_values:
              values: [ups, usps, dhl, fedex]
      - name: estimated_delivery_at
        description: '{{ doc("orders_estimated_delivery_at") }}'
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: TIMESTAMP_NTZ
        tags: [dbt_expectations]
      - name: delivered_at
        description: '{{ doc("orders_delivered_at") }}'
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: TIMESTAMP_NTZ
        tags: [dbt_expectations]
      - name: status
        description: '{{ doc("orders_status") }}'
        data_tests:
          - not_null
          - accepted_values:
              values: [delivered, shipped, preparing]

  - name: stg_postgres_order_items
    description: '{{ doc("order_items_description") }}'
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - order_id
            - product_id
            - quantity
    columns:
      - name: order_id
        description: '{{ doc("orders_order_id") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref('stg_postgres_orders')
              compare_column_name: order_id
        tags: [dbt_expectations]
      - name: product_id
        description: '{{ doc("orders_product_id") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref('stg_postgres_products')
              compare_column_name: product_id
        tags: [dbt_expectations]
      - name: quantity
        description: '{{ doc("order_items_quantity") }}'
        data_tests:
          - not_null
          - positive_values

  - name: stg_postgres_events
    description: '{{ doc("events_description") }}'
    data_tests:
      - dbt_expectations.expect_table_columns_to_match_ordered_list:
          column_list:
            - event_id
            - session_id
            - user_id
            - page_url
            - created_at
            - event_type
            - order_id
            - product_id
    columns:
      - name: event_id
        description: '{{ doc("events_event_id") }}'
        data_tests:
          - not_null
          - unique
      - name: session_id
        description: '{{ doc("events_session_id") }}'
      - name: user_id
        description: '{{ doc("events_user_id") }}'
        data_tests:
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref('stg_postgres_orders')
              compare_column_name: user_id
        tags: [dbt_expectations]
      - name: page_url
        description: '{{ doc("events_page_url") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '(https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z0-9]{2,}(\.[a-zA-Z0-9]{2,})(\.[a-zA-Z0-9]{2,})?\/[a-zA-Z0-9]{2,}'
        tags: [dbt_expectations]
      - name: created_at
        description: '{{ doc("events_created_at") }}'
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: TIMESTAMP_NTZ
        tags: [dbt_expectations]
      - name: event_type
        description: '{{ doc("events_event_type") }}'
        data_tests:
          - not_null
          - accepted_values:
              values: [checkout, package_shipped, add_to_cart, page_view]
      - name: order_id
        description: '{{ doc("events_order_id") }}'
        data_tests:
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref('stg_postgres_orders')
              compare_column_name: order_id
          - dbt_utils.expression_is_true:
              expression: "IS NULL"
              where: "event_type IN ('add_to_cart', 'page_view')"
        tags: [dbt_expectations, dbt_utils]
      - name: product_id
        description: '{{ doc("events_product_id") }}'
        data_tests:
          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
              compare_model: ref('stg_postgres_products')
              compare_column_name: product_id
          - dbt_utils.expression_is_true:
              expression: "IS NULL"
              where: "event_type IN ('checkout', 'package_shipped')"
        tags: [dbt_expectations, dbt_utils]
